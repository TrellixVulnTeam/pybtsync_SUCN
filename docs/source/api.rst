BitTorrent Sync API documentation
====================================

This is an attempt to document "undocumented" behaviors of the BitTorrent Sync API.


- REsT response will return wrong http codes

The BitTorrent Sync API will not return 400 when a "wrong" request is performed. Instead it is necessary to parse the response and look for an error key:

::

	>>> btsync._request_function('wrong')
	{'error': 1, 'message': 'Invalid API method name or format.'}
	>>> response = btsync._request_function('wrong')
	>>> 'error' in response
	True
	
- Keys generated by simply adding a folder are not encryption capable:

::

	>>> btsync.add_folder(tempfile.mkdtemp())
	{'result': 0}
	>>> btsync.folders
	[{'files': 0, 'error': 0, 'dir': '\\\\?\\c:\\users\\mac\\appdata\\local\\temp\\tmp_lj6m8', 'type': 'read_write', 'secret': 'AH6CE2YL7RUJ3C277FUJF7ECTOH3BIWZO',	'indexing': 0, 'size': 0}]
	>>> btsync.get_secrets('AH6CE2YL7RUJ3C277FUJF7ECTOH3BIWZO')
	{'read_only': 'BGCOZ2337JPE4D37SETGMWRVOYME3QKOO', 'read_write': 'AH6CE2YL7RUJ3C277FUJF7ECTOH3BIWZO'}
	
Instead you will need to generate the encrypted secret first and them add the folder with it:

	>>> btsync.get_secrets()
	{'read_only': 'EVT4XMODPNRO273HU24KWCOZNX462PMNBLZS35WBWGXJFGGU3K56ZCHKXNA', 'encryption': 'FVT4XMODPNRO273HU24KWCOZNX462PMNB', 'read_write': 'DUWRKE7KGEUY6L65QYCZDDMZCXO2EYPN5'}
	>>> btsync.add_folder(tempfile.mkdtemp(), 'EVT4XMODPNRO273HU24KWCOZNX462PMNBLZS35WBWGXJFGGU3K56ZCHKXNA')
	{'result': 0}
	>>> btsync.folders
	[{'files': 0, 'error': 0, 'dir': '\\\\?\\c:\\users\\mac\\appdata\\local\\temp\\tmp_lj6m8', 'type': 'read_write', 'secret': 'AH6CE2YL7RUJ3C277FUJF7ECTOH3BIWZO','indexing': 0, 'size': 0}, {'files': 0, 'error': 0, 'dir': '\\\\?\\c:\\users\\mac\\appdata\\local\\temp\\tmpx_y24r', 'type': 'read_only', 'secret': 'EVT4XMODPNRO273HU24KWCOZNX462PMNBLZS35WBWGXJFGGU3K56ZCHKXNA', 'indexing': 0, 'size': 0}]

It looks like the encrypted keys generate some extra overhead and that's way they are not in by default. Look at the BitTorrent Sync forum for more details.

- Getting secrets from an invalid secret will crash Sync:

::

	>>> btsync.get_secrets('DJj98eY2XqsVf83RpiDU0SuAzVZcPatsjJ2KsxkTDl5em2hMsxPqx')
	Traceback (most recent call last):
	...continues...

- Not sure why, but it seems that Sync looks for file modification actively instead of using some kind of inotify. This causes some problems. For example adding a relatively big number of folders (even if empty), will stuck a CPU core at 100%:

::

    >>> for x in range(1000):
            btsync.add_folder(tempfile.mkdtemp())
        